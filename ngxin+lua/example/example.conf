server {
	listen 8080;
	server_name _;
	
	location /lua {
		default_type 'text/html';
		content_by_lua_file /usr/example/lua/test.lua;
	}

	location ~ /lua_request/(\d+)/(\d+) {
		#设置nginx变量
		set $a $1;
		set $b $host;
		default_type "text/html";

		#nginx内容处理
		content_by_lua_file /usr/example/lua/test_request.lua;

		#内容体处理完成后调用
		echo_after_body "ngx.var.b $b";
	}

	location /lua_response_1 {
		default_type "text/html";
		content_by_lua_file /usr/example/lua/test_response_1.lua;
	}

	location /lua_response_2 {
		default_type "text/html";
		content_by_lua_file /usr/example/lua/test_response_2.lua;
	}

	location /lua_other {
		default_type "text/html";
		content_by_lua_file /usr/example/lua/test_other.lua;
	}

	location /lua_shared_dict {
		default_type "text/html";
		content_by_lua_file /usr/example/lua/test_lua_shared_dict.lua;
	}

	# set_by_lua_file: 语法 set_by_lua_file $var lua_file arg1 arg2..; 在lua代码中可以实现赋值逻辑
	# 当时要求执行速度要很快，不要阻塞
	location /lua_set_1 {
		default_type "text/html";
		set_by_lua_file $num /usr/example/lua/test_set_1.lua;
		echo $num;
	}

	location /lua_rewrite_1 {
		default_type "text/html";
		rewrite_by_lua_file /usr/example/lua/test_rewrite_1.lua;
		echo "no rewrite";
	}

	location /lua_rewrite_2 {
		default_type "text/html";
		rewrite_by_lua_file /usr/example/lua/test_rewrite_2.lua;
		echo "rewrite2 uri : $uri, a: $arg_a";
	}
	
	location /lua_allow {
		default_type "text/html";
		allow 127.0.0.1;
		deny all;
		echo "allow 127.0.0.1";
	}

	location /lua_access {
		default_type "text/html";
		access_by_lua_file /usr/example/lua/test_access.lua;
		echo "access";
	}

	location /lua_module_1 {
		default_type "text/html";
		lua_code_cache on;
		content_by_lua_file /usr/example/lua/test_module_1.lua;
	}

	location /lua_redis_basic {
		default_type "text/html";
		lua_code_cache on;
		content_by_lua_file /usr/example/lua/test_redis_basic.lua;
	}

	location /lua_mysql {
		default_type "text/html";
		lua_code_cache on;
		content_by_lua_file /usr/example/lua/test_mysql.lua;
	}

	location ~ /lua_cjson {
		default_type "text/html";
		lua_code_cache on;
		content_by_lua_file /usr/example/lua/test_cjson.lua;
	}

	#first match ngx location
	set $template_location "/templates";
	#then match root read file
	set $template_root "/usr/example/templates";

	location /templates {
		internal;
		# 首先查找 /usr/example/templates2，找不到会查找 /usr/example/templates
		alias /usr/example/templates2;
	}

	location /lua_template_1 {
		default_type "text/html";
		lua_code_cache on;
		content_by_lua_file /usr/example/lua/test_template1.lua;
	}

	location /lua_template_2 {
		default_type "text/html";
		lua_code_cache on;
		content_by_lua_file /usr/example/lua/test_template_2.lua;
	}

	location /lua_template_3 {
		default_type "text/html";
		lua_code_cache on;
		content_by_lua_file /usr/example/lua/test_template_3.lua;
	}

	location /records {
        set $backend_url $host;
        content_by_lua_file /usr/example/lua/records.lua;
    }

    location @proxy_location {
        proxy_pass $backend_url;
    }
}
